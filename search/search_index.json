{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#vcfstats-powerful-statistics-for-vcf-files","title":"vcfstats - powerful statistics for VCF files","text":"<p>  []10 []10</p> <p>Documentation | CHANGELOG</p>"},{"location":"#motivation","title":"Motivation","text":"<p>There are a couple of tools that can plot some statistics of VCF files, including <code>bcftools</code> and <code>jvarkit</code>. However, none of them could:</p> <ol> <li>plot specific metrics</li> <li>customize the plots</li> <li>focus on variants with certain filters</li> </ol> <p>R package <code>vcfR</code> can do some of the above. However, it has to load entire VCF into memory, which is not friendly to large VCF files.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install -U vcfstats\n</code></pre> <p>Or run with docker:</p> <pre><code>docker run \\\n  -w /vcfstats/workdir \\\n  -v $(pwd):/vcfstats/workdir \\\n  --rm justold/vcfstats:latest \\\n  vcfstats \\\n  --vcf myfile.vcf \\\n  -o outputs \\\n  --formula 'COUNT(1) ~ CONTIG' \\\n  --title 'Number of variants on each chromosome'\n</code></pre>"},{"location":"#gallery","title":"Gallery","text":""},{"location":"#number-of-variants-on-each-chromosome","title":"Number of variants on each chromosome","text":"<pre><code>vcfstats --vcf examples/sample.vcf \\\n    --outdir examples/ \\\n    --formula 'COUNT(1) ~ CONTIG' \\\n    --title 'Number of variants on each chromosome' \\\n    --config examples/config.toml\n</code></pre>"},{"location":"#changing-labels-and-ticks","title":"Changing labels and ticks","text":"<p><code>vcfstats</code> uses <code>plotnine</code> for plotting, read more about it on how to specify <code>--ggs</code> to modify the plots.</p> <pre><code>vcfstats --vcf examples/sample.vcf \\\n    --outdir examples/ \\\n    --formula 'COUNT(1) ~ CONTIG' \\\n    --title 'Number of variants on each chromosome (modified)' \\\n    --config examples/config.toml \\\n    --ggs 'scale_x_discrete(name =\"Chromosome\", \\\n        limits=[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"X\"]); \\\n        ylab(\"# Variants\")'\n</code></pre> <p></p>"},{"location":"#number-of-variants-on-first-5-chromosome","title":"Number of variants on first 5 chromosome","text":"<pre><code>vcfstats --vcf examples/sample.vcf \\\n    --outdir examples/ \\\n    --formula 'COUNT(1) ~ CONTIG[1,2,3,4,5]' \\\n    --title 'Number of variants on each chromosome (first 5)' \\\n    --config examples/config.toml\n# or\nvcfstats --vcf examples/sample.vcf \\\n    --outdir examples/ \\\n    --formula 'COUNT(1) ~ CONTIG[1-5]' \\\n    --title 'Number of variants on each chromosome (first 5)' \\\n    --config examples/config.toml\n# or\n# require vcf file to be tabix-indexed.\nvcfstats --vcf examples/sample.vcf \\\n    --outdir examples/ \\\n    --formula 'COUNT(1) ~ CONTIG' \\\n    --title 'Number of variants on each chromosome (first 5)' \\\n    --config examples/config.toml -r 1 2 3 4 5\n</code></pre>"},{"location":"#number-of-substitutions-of-snps","title":"Number of substitutions of SNPs","text":"<pre><code>vcfstats --vcf examples/sample.vcf \\\n    --outdir examples/ \\\n    --formula 'COUNT(1, VARTYPE[snp]) ~ SUBST[A&gt;T,A&gt;G,A&gt;C,T&gt;A,T&gt;G,T&gt;C,G&gt;A,G&gt;T,G&gt;C,C&gt;A,C&gt;T,C&gt;G]' \\\n    --title 'Number of substitutions of SNPs' \\\n    --config examples/config.toml\n</code></pre>"},{"location":"#only-with-snps-pass-all-filters","title":"Only with SNPs PASS all filters","text":"<pre><code>vcfstats --vcf examples/sample.vcf \\\n    --outdir examples/ \\\n    --formula 'COUNT(1, VARTYPE[snp]) ~ SUBST[A&gt;T,A&gt;G,A&gt;C,T&gt;A,T&gt;G,T&gt;C,G&gt;A,G&gt;T,G&gt;C,C&gt;A,C&gt;T,C&gt;G]' \\\n    --title 'Number of substitutions of SNPs (passed)' \\\n    --config examples/config.toml \\\n    --passed\n</code></pre>"},{"location":"#alternative-allele-frequency-on-each-chromosome","title":"Alternative allele frequency on each chromosome","text":"<pre><code># using a dark theme\nvcfstats --vcf examples/sample.vcf \\\n    --outdir examples/ \\\n    --formula 'AAF ~ CONTIG' \\\n    --title 'Allele frequency on each chromosome' \\\n    --config examples/config.toml --ggs 'theme_dark()'\n</code></pre>"},{"location":"#using-boxplot","title":"Using boxplot","text":"<pre><code>vcfstats --vcf examples/sample.vcf \\\n    --outdir examples/ \\\n    --formula 'AAF ~ CONTIG' \\\n    --title 'Allele frequency on each chromosome (boxplot)' \\\n    --config examples/config.toml \\\n    --figtype boxplot\n</code></pre>"},{"location":"#using-density-plothistogram-to-investigate-the-distribution","title":"Using density plot/histogram to investigate the distribution:","text":"<p>You can plot the distribution, using density plot or histogram</p> <pre><code>vcfstats --vcf examples/sample.vcf \\\n    --outdir examples/ \\\n    --formula 'AAF ~ CONTIG[1,2]' \\\n    --title 'Allele frequency on chromosome 1,2' \\\n    --config examples/config.toml \\\n    --figtype density\n</code></pre> <p></p>"},{"location":"#overall-distribution-of-allele-frequency","title":"Overall distribution of allele frequency","text":"<pre><code>vcfstats --vcf examples/sample.vcf \\\n    --outdir examples/ \\\n    --formula 'AAF ~ 1' \\\n    --title 'Overall allele frequency distribution' \\\n    --config examples/config.toml\n</code></pre>"},{"location":"#excluding-some-lowhigh-frequency-variants","title":"Excluding some low/high frequency variants","text":"<pre><code>vcfstats --vcf examples/sample.vcf \\\n    --outdir examples/ \\\n    --formula 'AAF[0.05, 0.95] ~ 1' \\\n    --title 'Overall allele frequency distribution (0.05-0.95)' \\\n    --config examples/config.toml\n</code></pre>"},{"location":"#counting-types-of-variants-on-each-chromosome","title":"Counting types of variants on each chromosome","text":"<pre><code>vcfstats --vcf examples/sample.vcf \\\n    --outdir examples/ \\\n    --formula 'COUNT(1, group=VARTYPE) ~ CHROM' \\\n    # or simply\n    # --formula 'VARTYPE ~ CHROM' \\\n    --title 'Types of variants on each chromosome' \\\n    --config examples/config.toml\n</code></pre>"},{"location":"#using-bar-chart-if-there-is-only-one-chromosome","title":"Using bar chart if there is only one chromosome","text":"<pre><code>vcfstats --vcf examples/sample.vcf \\\n    --outdir examples/ \\\n    --formula 'COUNT(1, group=VARTYPE) ~ CHROM[1]' \\\n    # or simply\n    # --formula 'VARTYPE ~ CHROM[1]' \\\n    --title 'Types of variants on chromosome 1' \\\n    --config examples/config.toml \\\n    --figtype pie\n</code></pre>"},{"location":"#counting-variant-types-on-whole-genome","title":"Counting variant types on whole genome","text":"<pre><code>vcfstats --vcf examples/sample.vcf \\\n    --outdir examples/ \\\n    # or simply\n    # --formula 'VARTYPE ~ 1' \\\n    --formula 'COUNT(1, group=VARTYPE) ~ 1' \\\n    --title 'Types of variants on whole genome' \\\n    --config examples/config.toml\n</code></pre>"},{"location":"#counting-type-of-mutant-genotypes-het-hom_alt-for-sample-1-on-each-chromosome","title":"Counting type of mutant genotypes (HET, HOM_ALT) for sample 1 on each chromosome","text":"<pre><code>vcfstats --vcf examples/sample.vcf \\\n    --outdir examples/ \\\n    # or simply\n    # --formula 'GTTYPEs[HET,HOM_ALT]{0} ~ CHROM' \\\n    --formula 'COUNT(1, group=GTTYPEs[HET,HOM_ALT]{0}) ~ CHROM' \\\n    --title 'Mutant genotypes on each chromosome (sample 1)' \\\n    --config examples/config.toml\n</code></pre>"},{"location":"#exploration-of-meangenotype-quality-and-meandepth-on-each-chromosome-for-sample-1","title":"Exploration of mean(genotype quality) and mean(depth) on each chromosome for sample 1","text":"<pre><code>vcfstats --vcf examples/sample.vcf \\\n    --outdir examples/ \\\n    --formula 'MEAN(GQs{0}) ~ MEAN(DEPTHs{0}, group=CHROM)' \\\n    --title 'GQ vs depth (sample 1)' \\\n    --config examples/config.toml\n</code></pre>"},{"location":"#exploration-of-depths-for-sample-12","title":"Exploration of depths for sample 1,2","text":"<pre><code>vcfstats --vcf examples/sample.vcf \\\n    --outdir examples/ \\\n    --formula 'DEPTHs{0} ~ DEPTHs{1}' \\\n    --title 'Depths between sample 1 and 2' \\\n    --config examples/config.toml\n</code></pre> <p>See more examples:</p> <p>https://github.com/pwwang/vcfstats/issues/15#issuecomment-1029367903</p>"},{"location":"CHANGELOG/","title":"Change log","text":""},{"location":"CHANGELOG/#change-log","title":"Change Log","text":""},{"location":"CHANGELOG/#070","title":"0.7.0","text":"<ul> <li>BREAKING: drop support for python3.8</li> <li>ci: use latest actions</li> <li>ci: update dependencies installation step to include tabix</li> <li>fix(tests): support bgzip &lt; 1.20 (without -o option)</li> </ul>"},{"location":"CHANGELOG/#060","title":"0.6.0","text":"<ul> <li>\u2728 Allow passing vcf as 2nd arg to macros (#45)</li> <li>\u2b06\ufe0f Update dependencies</li> </ul>"},{"location":"CHANGELOG/#050","title":"0.5.0","text":"<ul> <li>\u2795 Use argx instead of pyparam</li> </ul>"},{"location":"CHANGELOG/#043","title":"0.4.3","text":"<ul> <li>\ud83d\ude91 Fix numpy error raised from plotnine (#35)</li> <li>\ud83d\udcdd Update usage with docker in README.md (#33)</li> <li>\ud83d\udc77 Add python3.10 to CI</li> </ul>"},{"location":"CHANGELOG/#042","title":"0.4.2","text":"<ul> <li>\ud83d\udc1b Fix config file not used correctly (#27)</li> </ul>"},{"location":"CHANGELOG/#041","title":"0.4.1","text":"<ul> <li>\ud83d\udcdd Add more examples regarding #20</li> <li>\ud83d\udc1b Fix devpars by default a Namespace rather than a dict (#21, #22)</li> </ul>"},{"location":"CHANGELOG/#040","title":"0.4.0","text":"<ul> <li>\u2b06\ufe0f Drop support for python 3.8 (brentp/cyvcf2#181)</li> <li>\ud83d\udea8 Use python3.9 in Dockerfile</li> <li>\u2b06\ufe0f\ufe0f Upgrade pyparam to 0.5</li> <li>\u2b06\ufe0f Upgrade and pin deps</li> <li>\ud83d\udcdd Add more examples (#15, #17)</li> <li>\ud83d\udc77 Add docker build in CI</li> </ul>"},{"location":"CHANGELOG/#030","title":"0.3.0","text":"<ul> <li>Introduce enhancements (pwwang/vcfstats#15)</li> </ul>"},{"location":"CHANGELOG/#020","title":"0.2.0","text":"<ul> <li>Use <code>plotnine</code> instead of <code>ggplot2</code> so no <code>R</code> is needed</li> <li>Add <code>figfmt</code> to generate different format of figures other than <code>png</code></li> </ul>"},{"location":"CHANGELOG/#010","title":"0.1.0","text":"<ul> <li>Allow program to be run by <code>python -m vcfstats</code></li> <li>Avoid using root logger configuration</li> </ul>"},{"location":"CHANGELOG/#006","title":"0.0.6","text":"<ul> <li>Adopt latest pyparam</li> </ul>"},{"location":"CHANGELOG/#005","title":"0.0.5","text":"<ul> <li>Adopt lastest cmdy</li> </ul>"},{"location":"CHANGELOG/#004","title":"0.0.4","text":"<ul> <li>Add original formula in the error message if it is malformated</li> <li>Add warnings if failed to fetch sample depth for a variant</li> <li>Fix a bug when continuous filter has zero</li> <li>Other fixes</li> </ul>"},{"location":"CHANGELOG/#003","title":"0.0.3","text":"<ul> <li>Fix <code>CAT ~ CAT</code> plots</li> <li>Use pie chart for <code>CAT ~ 1</code> as default</li> </ul>"},{"location":"CHANGELOG/#002","title":"0.0.2","text":"<ul> <li>Add tests and fix bugs</li> </ul>"},{"location":"CHANGELOG/#001","title":"0.0.1","text":"<ul> <li>Implement basic functions</li> </ul>"},{"location":"cliargs/","title":"Command-line arguments","text":""},{"location":"cliargs/#command-line-arguments","title":"Command-line arguments","text":"<pre><code>DESCRIPTION:\n  vcfstats v0.2.0: Powerful VCF statistics.\n\nUSAGE:\n  vcfstats --vcf PATH --outdir AUTO --formula LIST --title LIST [OPTIONS]\n\nREQUIRED OPTIONS:\n  -v, --vcf &lt;PATH&gt;          - The VCF file.\n  -o, --outdir &lt;AUTO&gt;       - The output directory.\n  -f, --formula &lt;LIST&gt;      - The formulas for plotting in format of Y ~ X,\n                              where Y and X should be either an entry or an\n                              aggregation.\n  --title &lt;LIST&gt;            - The title of each figure, will be used to name the\n                              output files as well.\n\nOPTIONAL OPTIONS:\n  --loglevel &lt;STR&gt;          - The logging level. Default: info\n  --figtype &lt;LIST&gt;          - Your preferences for type of plot for each\n                              formula. Default: \\[]\n  --figfmt &lt;LIST&gt;           - Your preferences for format of figure for each\n                              formula, Any file format supported by matplotlib.\n                              Default is png. Default: \\[]\n  -r, --region &lt;LIST&gt;       - Regions in format of CHR or CHR:START-END\n                              Default: \\[]\n  -R, --Region &lt;AUTO&gt;       - Regions in a BED file. If both --region/--Region\n                              are provided, regions will be merged together.\n                              Default: None\n  -p, --passed [BOOL]       - Only analyze variants that pass all filters.\n                              This does not work if FILTER entry is in the\n                              analysis.\n                              Default: False\n  -l, --list [BOOL]         - List all available macros. Default: False\n  -s, --savedata [BOOL]     - Whether save the plotting data for further\n                              exploration. Default: False\n  --macro &lt;PATH&gt;            - A user-defined macro file. Default: None\n  --ggs &lt;LIST&gt;              - Extra ggplot2 expressions for each plot\n                              Default: \\[]\n  --devpars &lt;NS&gt;            - The device parameters for plots. To specify\n                              devpars for each plot, use a configuration file.\n  -c, --config &lt;AUTO&gt;       - A configuration file defining how to plot in TOML\n                              format.\n                              If this is provided, CLI arguments will be\n                              overwritten if defined in this file. Default: None\n  -h, --help                - Print help information for this command\n\nOPTIONAL OPTIONS UNDER --devpars:\n  --devpars.width &lt;INT&gt;     - The width of the plot Default: 2000\n  --devpars.height &lt;INT&gt;    - The height of the plot Default: 2000\n  --devpars.res &lt;INT&gt;       - The resolution of the plot Default: 300\n</code></pre> <ul> <li> <p>You can specify regions using <code>-r/--region</code> and/or <code>-R/--Region</code>, however, you have to make sure regions are not overlapping, otherwise, variants in the overlapping regions will be redundant in the calculations.</p> </li> <li> <p>To define you macros, you'd better use <code>docstr</code>, so that you can use <code>-l/--list</code> to check out your macros</p> </li> <li> <p>You can generate multiple plots in one run. Just specify multiple formulas and multiple titles. For example:     <pre><code>vcfstats --vcf examples/sample.vcf \\\n\t--outdir vcfstats-out \\\n\t--formula 'DEPTHs{0} ~ CHROM' 'AAF ~ CHROM' \\\n\t--title 'Depth distribution on each chromosome' 'Allele frequency distribution on each chromosome'\n</code></pre></p> </li> <li> <p>You can also specify different figure types for different plots. If you want to keep ones as default, you can pass an empty string. For example:     <pre><code>vcfstats --vcf examples/sample.vcf \\\n\t--outdir vcfstats-out \\\n\t--formula 'DEPTHs{0} ~ CHROM' 'AAF ~ CHROM' \\\n\t--title 'Depth distribution on each chromosome' 'Allele frequency distribution on each chromosome' \\\n\t--figtype '' boxplot # using boxplot instead of violin for 2nd plot\n</code></pre></p> </li> <li> <p>Similar as <code>--figtype</code>, you can also use <code>--ggs</code> to modify the plots generated by <code>ggplot2</code>. Please refer to <code>ggplot2</code> documentation.</p> </li> <li> <p>However, for <code>--devpars</code>, you can only specify a universal parameters. To change each sub-parameter of it, you can do <code>--devpars.res 70</code></p> </li> <li> <p>To specify different devpars for different plots, you have to use a configuration file. Please refer to seciont <code>Configuration file</code></p> </li> <li> <p>To specify <code>--ggs</code> for multiple plots, you can do <code>--ggs \"theme_minimal()\" \"theme_dark()\"</code>. If you have multiple ggs for the same plot, you need <code>;</code> to seaprate them: <code>--ggs \"theme_minimal(); ylab('Count')\" \"theme_dark(); xlab('ABC')\"</code></p> </li> </ul>"},{"location":"configfile/","title":"Configuration file","text":""},{"location":"configfile/#configuration-file","title":"Configuration file","text":"<p>We are using <code>toml</code> file as configuration file. Please refer to its documentation.</p> <p>To overwrite arguments from command line, just specify the values directly in the configuration file. For example: <pre><code>devpars = {width = 1000, height = 1000, res = 100}\npassed = true\n</code></pre></p> <p>To specify multiple plots, we do: <pre><code>passed = true\n\n[[instance]]\nformula = 'DEPTHs{0} ~ CHROM'\ntitle = 'Depth distribution on each chromosome'\nggs = 'theme_minimal()'\ndevpars = {width = 1000, height = 1000, res = 100}\n\n[[instance]]\nformula = 'AAF ~ CHROM'\ntitle = 'Allele frequency distribution on each chromosome'\nggs = 'theme_bw()'\ndevpars = {width = 2000, height = 2000, res = 300}\n</code></pre></p> <p>When you have a configuration file provided, <code>--title</code> and <code>--formula</code> are optional.</p> <p>The instances specified by <code>--title</code> and <code>--formula</code> will be used together with the ones provided in the configuration file.</p>"},{"location":"formulas/","title":"Formulas","text":""},{"location":"formulas/#formulas","title":"Formulas","text":"<p>Formulas are composed of macros on both sides, which are connected by <code>'~'</code>. It looks like the formula syntax from <code>R</code>: <code>Y ~ X</code>. This basically determines how the plots are generated.</p> <p>However, we don't support operators like it from <code>R</code>. So we only have <code>Y ~ X</code>, but not <code>Y ~ X1 + X2</code>. In order to implement this, we have to define a macro to add <code>X1</code> and <code>X2</code> up.</p> <p>We have three types of macros:</p> <ol> <li><code>continuous</code>: extracts continues values from a variant, such as allele frequency, depth, etc.</li> <li><code>categorical</code>: extracts categorical values from a variant, such as variant type, genotype, etc.</li> <li><code>aggregation</code>: aggregates some values from a group of variants, such as mean of allele frequency from chromosome 1. You can also add a filter to aggregation by <code>COUNT(1, filter=AAF[0.05, 0.95], group=CHROM)</code></li> </ol> <p>See section <code>Macros</code> for details.</p> <p>Tip</p> <p>If you have both aggregations for Y and X, you can omit the group for either. The one without group will automatically use the group that is specified to the other one.</p>"},{"location":"formulas/#predefined-figure-types-for-different-combination-of-y-and-x","title":"Predefined figure types for different combination of <code>Y</code> and <code>X</code>","text":"Y X default figure type other available figure types <code>aggregation</code> <code>aggregation</code> scatter - <code>aggregation</code> <code>categorical</code> col pie <code>aggregation</code> <code>1</code> pie col anything other than <code>aggregation</code> <code>aggregation</code> not available - <code>categorical</code> <code>categorical</code> bar pie <code>continuous</code> <code>categorical</code> voilin boxplot/histogram/density/freqpoly <code>categorical</code> <code>1</code> pie bar <code>categorical</code> <code>continuous (not 1)</code> not available - <code>continueous</code> <code>continuous</code> scatter -"},{"location":"formulas/#geoms-from-ggplot2-used-to-plot-for-different-figure-types","title":"<code>geom</code>s from <code>ggplot2</code> used to plot for different figure types","text":"figure type geom scatter <code>geom_point</code> col <code>geom_col</code> pie <code>geom_col</code> with <code>coord_polar</code> bar <code>geom_bar</code> violin <code>geom_violin</code> boxplot <code>geom_boxplot</code> density <code>geom_density</code> freqpoly <code>geom_freqpoly</code>"},{"location":"macros/","title":"Macros","text":""},{"location":"macros/#macros","title":"Macros","text":"<p>Macros are used to gather some information from variants. They are nothing but just python function with our decorators.</p> <p>To define a macro:</p> <pre><code>from vcfstats.macros import continuous\n\n@continuous\ndef QUAL(variant):\n\treturn variant.QUAL\n</code></pre> <p>We are using <code>cyvcf2</code> to get variant information, please refer to its API documentation to explore what kind of metrics we can get from a variant.</p> <p>Note</p> <p><code>vcf</code> is initialized with <code>gts012 = True</code>, which is not the default value of <code>cyvcf2</code>. \\ <code>gts012 = True</code> indicates that genotype 2 as <code>HOM_ALT</code> and 3 as <code>UNKNOWN</code>.</p>"},{"location":"macros/#shortcuts-for-macro-decorators","title":"Shortcuts for macro decorators","text":"decrator shortcut continuous cont categorical cat aggregation aggr"},{"location":"macros/#macros-other-than-aggregations-with-sample-data","title":"Macros other than aggregations with sample data","text":"<p>If a macro returns sample data, we need to return a list or <code>numpy.array</code> with data for each sample. In the formula, we have to use brackets to get the information of certain sample. For example:</p> <pre><code>from vcf.macros import cat\n\n@cat\ndef GTTYPEs(variant)\n\tgttypes = variant.gt_types\n\treturn ['HOM_REF'if gttype == 0 else \\\n\t\t\t'HET' if gttype == 1 else \\\n\t\t\t'HOM_ALT' if gttype == 2 else 'UNKNOWN' for gttype in gttypes]\n</code></pre> <p>To get the genotype in sample 1 in formula: <code>GTTYPEs{0}</code>. You can also use sample name as well: <code>GTTYPEs{some sample}</code></p> <p>It's also allowed to pass <code>vcf</code> (the instance of <code>cyvcf.VCF</code>) as the second argument to the macro. For example:</p> <pre><code>from vcf.macros import cont\n\n@cont\ndef MIXED_INFO(variant, vcf):\n\t...\n</code></pre> <p>Check the API documentation of <code>cyvcf2</code> to see what information we can get from <code>vcf</code>.</p>"},{"location":"macros/#macros-with-filters","title":"Macros with filters","text":"<p><code>aggregation</code>s have different syntax for filters. Here we are discussing about <code>continuous</code> and <code>categorical</code>.</p> <p>For <code>continuous</code> macros, we can use an upper and lower bound to filter. For example: <code>AAF[0.05, 0.95]</code> will take only variants with alternate allele frequency within <code>[0.05, 0.95]</code>, including <code>0.05</code> and <code>0.95</code>. We don't have a lower/upper bound exclusive syntax, so to exclude <code>0.05</code>, we can specify some value less than and close to it, say <code>0.0499</code>.</p> <p>For <code>categorical</code> macros, we can specify the categories that we want to keep in the plotting. For example: <code>CHROM[chr1, chr2, chr3]</code>. More conveniently, we can use hyphen to include a range of categories. For example, <code>CHROM[chr1-chr22, chrX, chrY]</code> will include all human chromosomes.</p> <p>Hint</p> <p>With both filters and sample subscribes, it doesn't matter which one you put it first. That means you can do both <code>GTTYPEs{0}[HET]</code> and <code>GTTYPEs[HET]{0}</code>. They are the same.</p>"},{"location":"macros/#aggregations","title":"Aggregations","text":"<p>When you define aggregations, you just define who to aggregate the values. For example: <pre><code>from vcfstats.macros import aggr\n@aggr\ndef SUM(values):\n\treturn sum(values)\n</code></pre> While when you use it, you can specify macros as filter and group for it. For example: <code>SUM(DEPTHs{0}, filter=FILTER[PASS], group=CHROM)</code>. This means to sum up the depth of variants pass all filters on each chromosome for the first sample.</p> <p>Note</p> <p>Generally, we have to specify <code>group</code> for an aggregation. There are 2 situations that you don't have to:</p> <ol> <li> <p>when an aggregation is used as <code>Y</code>, left part of the formula, and <code>X</code> is a categorical macro. Then the categorical values will be used as <code>group</code> for the aggregation.</p> </li> <li> <p>both <code>X</code> and <code>Y</code> are aggregations and one of them can have no <code>group</code> and will use the <code>group</code> from the other one.</p> </li> </ol>"},{"location":"macros/#built-in-macros","title":"Built-in macros","text":"<pre><code>@categorical\ndef VARTYPE(variant):\n\t\"\"\"Variant type, one of deletion, indel, snp or sv\"\"\"\n\treturn \tvariant.var_type\n\n@categorical\ndef TITV(variant):\n\t\"\"\"Tell if a variant is a transition or transversion. The variant has to be an snp first.\"\"\"\n\tif not variant.is_snp:\n\t\treturn False\n\treturn 'transition' if variant.is_transition else 'transversion'\n\n@categorical(alias = 'CHROM')\ndef CONTIG(variant):\n\t\"\"\"Get the config/chromosome of a variant. Alias: CHROM\"\"\"\n\treturn variant.CHROM\n\n@categorical(alias = 'GT_TYPEs')\ndef GTTYPEs(variant):\n\t\"\"\"Get the genotypes(HOM_REF,HET,HOM_ALT,UNKNOWN) of a variant for each sample\"\"\"\n\tgttypes = variant.gt_types\n\treturn ['HOM_REF'if gttype == 0 else \\\n\t\t\t'HET' if gttype == 1 else \\\n\t\t\t'HOM_ALT' if gttype == 2 else 'UNKNOWN' for gttype in gttypes]\n\n@categorical\ndef FILTER(variant):\n\t\"\"\"Get the FILTER of a variant.\"\"\"\n\treturn variant.FILTER or 'PASS'\n\n@categorical\ndef SUBST(variant):\n\t\"\"\"Substitution of the variant, including all types of varinat\"\"\"\n\treturn '{}&gt;{}'.format(variant.REF, ','.join(variant.ALT))\n\n@continuous\ndef NALT(variant):\n\t\"\"\"Number of alternative alleles\"\"\"\n\treturn len(variant.ALT)\n\n@continuous\ndef GQs(variant):\n\t\"\"\"get the GQ for each sample as a numpy array.\"\"\"\n\treturn variant.gt_quals\n\n@continuous\ndef QUAL(variant):\n\t\"\"\"Variant quality from QUAL field.\"\"\"\n\treturn variant.QUAL\n\n@continuous(alias = 'DPs')\ndef DEPTHs(variant):\n\t\"\"\"Get the read-depth for each sample as a numpy array.\"\"\"\n\treturn [sum(dp) for dp in variant.format('DP')]\n\n@continuous\ndef AAF(variant):\n\t\"\"\"Alternate allele frequency across samples in this VCF.\"\"\"\n\treturn variant.aaf\n\n@continuous\ndef AFs(variant):\n\t\"\"\"get the freq of alternate reads as a numpy array.\"\"\"\n\treturn variant.gt_alt_freqs\n\n@continuous\ndef _ONE(variant):\n\t\"\"\"Return 1 for a variant, usually used in aggregation, or indication of a distribution plot\"\"\"\n\treturn 1\n\n@aggregation\ndef COUNT(entries):\n\t\"\"\"Count the variants in groups\"\"\"\n\treturn len(entries)\n\n@aggregation\ndef SUM(entries):\n\t\"\"\"Sum up the values in groups\"\"\"\n\treturn sum(entries)\n\n@aggregation(alias = 'AVG')\ndef MEAN(entries):\n\t\"\"\"Get the mean of the values\"\"\"\n\tif not entries:\n\t\treturn 0.0\n\treturn sum(entries) / len(entries)\n</code></pre>"}]}